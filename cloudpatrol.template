{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template to run CloudPatrol",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String"
    },

    "sha1" : {
      "Default" : "master",
      "Description" : "sha1 or branch HEAD to checkout",
      "Type" : "String"
    },

    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m1.medium",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-05355a6c" },
      "us-west-1"      : { "AMI" : "ami-951945d0" },
      "us-west-2"      : { "AMI" : "ami-16fd7026" },
      "eu-west-1"      : { "AMI" : "ami-24506250" },
      "sa-east-1"      : { "AMI" : "ami-3e3be423" },
      "ap-southeast-1" : { "AMI" : "ami-74dda626" },
      "ap-northeast-1" : { "AMI" : "ami-dcfa4edd" }
    }
  },

  "Resources" : {
    "User" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { 
            "Statement":[{
              "Effect":"Allow",
              "Action":"*",
              "Resource":"*"
            }
          ]}
        }]
      }
    },

    "HostKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref": "User" }
      }
    },

    "Ec2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "rubygems" : {
                "bundler" : []
              },
              "yum" : {
                "gcc-c++"       : [],
                "autoconf"      : [],
                "automake"      : [],
                "libxml2-devel" : [],
                "libxslt-devel" : [],
                "git"           : [],
                "sqlite-devel"  : [],

                 "make" : []
              }
            },
            "services" : {
              "sysvinit" : {
                "railsd" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            },
            "files" : {
              "/etc/chef/solo.rb" : {
                "content" : { "Fn::Join" : ["", [
                  "log_level :info\n",
                  "log_location STDOUT\n",
                  "file_cache_path \"/var/chef-solo\"\n",
                  "cookbook_path \"/var/chef-solo/cookbooks\"\n"
                ]] },
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/chef/node.json" : {
                "content" : {"Fn::Join":["",[""]]},
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/root/.gemrc" : {
                "content" : { "Fn::Join" : ["", [
                  "gem: --no-ri --no-rdoc"
                ]]}
              },
              "/etc/gemrc" : {
                "content" : { "Fn::Join" : ["", [
                  "gem: --no-ri --no-rdoc"
                ]]}
              },
              "/etc/init.d/railsd" : {
                "mode" : "0x644", 
                "content" : { "Fn::Join" : ["", [
                "#! /bin/sh\n",
                "### BEGIN INIT INFO\n",
                "# Default-Start:     2 3 4 5\n",
                "# Default-Stop:      0 1 6\n",
                "### END INIT INFO\n",
                "PORT=80\n",
                "RAILS_ROOT=\"/root/cloudpatrol\"\n",
                "COMMAND=\"rails server -p$PORT -d\"\n",
                "do_start()\n",
                "{\n",
                "  cd $RAILS_ROOT && $COMMAND\n",
                "}\n",
                "case \"$1\" in\n",
                "  start)\n",
                "    do_start\n",
                "  ;;\n",
                "esac\n"
                ]]},
                "mode"  : "000544",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },

      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroups" : [ {"Ref" : "FrontendGroup"} ],
        "InstanceType"   : { "Ref" : "InstanceType" },
        "Tags": [ { "Key": "Name", "Value": "CloudPatrol" } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Install ruby 1.9.3\n",
          "wget https://s3.amazonaws.com/OpenDelivery/resources/rpm/ruby-1.9.3p0-2.amzn1.x86_64.rpm\n",
          "rpm -Uvh ruby-1.9.3p0-2.amzn1.x86_64.rpm\n",

          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r Ec2Instance ",
          "    --access-key ", { "Ref" : "HostKeys" },
          "    --secret-key ", { "Fn::GetAtt" : [ "HostKeys", "SecretAccessKey" ]},
          "    --region ", { "Ref" : "AWS::Region" }, "\n",

          "curl -L https://www.opscode.com/chef/install.sh | bash\n",

          "cd /root/\n",
          "git clone https://github.com/stelligent/cloudpatrol.git\n",
          "cd cloudpatrol\n",
          "git checkout ", { "Ref" : "sha1" }, "\n",
          "bundle install --without development test doc\n",
          "rake db:setup\n",
          "rails server -p80 -d\n",

          "/opt/aws/bin/cfn-signal", " -e 0", " '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "FrontendGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "IPAddress" : {
      "Type" : "AWS::EC2::EIP"
    },

    "IPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : { "Ref" : "Ec2Instance" },
        "EIP" : { "Ref" : "IPAddress" }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "Ec2Instance",
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "1500"
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Ref" : "IPAddress" }, "/"]] }
    },

    "InstanceIPAddress" : {
      "Value" : { "Fn::Join" : ["", [{ "Ref" : "IPAddress" }]] }
    }
  }
}
